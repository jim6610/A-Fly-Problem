using System.Collections;
using System.Collections.Generic;
using UnityEngine;

enum FlyMode
{
    TRAVELLING = 0,
    FLOOR_LANDING = 1,
    WALL_LANDING = 2
}

[RequireComponent(typeof(Rigidbody))]
public class FlyRelativeMovmement : MonoBehaviour
{
    private Rigidbody rb;
    [SerializeField]
    private float thrustForce;
    [SerializeField]
    private float targetHeight;
    [SerializeField]
    private float ceilingAwareness;
    [SerializeField]
    private float maxSpeed;

    private Transform navigatorTransform;
    private FlyNavigator flyNavigator;
    bool travellingUp;
    private FlyMode flyMode;


    void Start()
    {
        rb = GetComponent<Rigidbody>();
        flyNavigator = GetComponentInParent<FlyNavigator>();
        navigatorTransform = flyNavigator.gameObject.transform;
        travellingUp = true;
        flyMode = FlyMode.TRAVELLING;
        

    }

    private void SwerveRoutine()
    {
        bool normalTrajectory = true;
        if (travellingUp)
        {
            RaycastHit hit;
            if (Physics.Raycast(transform.position, Vector3.up, out hit))
            {
                if (hit.distance < ceilingAwareness)
                {
                    rb.AddRelativeForce(Vector3.down * thrustForce);
                    normalTrajectory = false;
                }
                else
                    normalTrajectory = true;
            }

            if (normalTrajectory)
            {
                if (transform.position.y < navigatorTransform.position.y+ targetHeight)
                    rb.AddRelativeForce(Vector3.up * thrustForce);
                else
                    travellingUp = false;
            }

        }
        else
        {
            if (transform.position.y > navigatorTransform.position.y + targetHeight)
                rb.AddRelativeForce(Vector3.down * thrustForce);
            else
                travellingUp = true;
        }
    }

    void LandingRoutine()
    {
        if (rb.velocity.y > 0)
        {
            rb.AddRelativeForce(Vector3.down * thrustForce);
        }
        else
        {
            //RaycastHit hit;
            //if (Physics.Raycast(transform.position, Vector3.down, out hit))
            //{

            //}
            rb.AddRelativeForce(Vector3.up * -rb.velocity.y);
        }
    }



    void Update()
    {
        switch(flyMode)
        {
            case FlyMode.TRAVELLING:
                break;
            case FlyMode.FLOOR_LANDING:
                break;
                case FlyMode.WALL_LANDING;
        }
        SwerveRoutine();
    }

    private void FixedUpdate()
    {
        if (rb.velocity.magnitude > maxSpeed)
            rb.velocity = rb.velocity.normalized * maxSpeed;
    }
}
